//! Configuration module for Pattern
//!
//! This is a temporary config module while we migrate from the monolithic structure.

use serde::{Deserialize, Serialize};
use std::path::Path;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Config {
    /// Database configuration
    pub database: DatabaseConfig,

    /// Model configuration
    pub models: ModelConfig,

    /// Discord configuration
    #[cfg(feature = "discord")]
    pub discord: DiscordConfig,

    /// MCP configuration
    #[cfg(feature = "mcp")]
    pub mcp: McpConfig,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DatabaseConfig {
    /// SurrealDB connection URL
    pub url: String,

    /// Database namespace
    pub namespace: String,

    /// Database name
    pub database: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ModelConfig {
    /// Default model provider
    pub default_provider: String,

    /// Default model name
    pub default_model: String,

    /// Model capability mappings
    pub tiers: ModelTiers,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ModelTiers {
    pub routine: String,
    pub interactive: String,
    pub investigative: String,
    pub critical: String,
}

#[cfg(feature = "discord")]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DiscordConfig {
    /// Discord bot token
    pub token: String,

    /// Command prefix
    pub prefix: String,

    /// Allowed channel IDs (if restricted)
    pub allowed_channels: Option<Vec<String>>,
}

#[cfg(feature = "mcp")]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct McpConfig {
    /// Transport type: "stdio", "http", or "sse"
    pub transport: String,

    /// Port for HTTP/SSE transports
    pub port: Option<u16>,
}

impl Config {
    /// Load configuration from file
    pub async fn load<P: AsRef<Path>>(path: P) -> miette::Result<Self> {
        let content = tokio::fs::read_to_string(path)
            .await
            .map_err(|e| miette::miette!("Failed to read config file: {}", e))?;

        toml::from_str(&content)
            .map_err(|e| miette::miette!("Failed to parse config file: {}", e))
    }
}

impl Default for Config {
    fn default() -> Self {
        Self {
            database: DatabaseConfig {
                url: "ws://localhost:8000".to_string(),
                namespace: "pattern".to_string(),
                database: "pattern".to_string(),
            },
            models: ModelConfig {
                default_provider: "anthropic".to_string(),
                default_model: "claude-3-haiku-20240307".to_string(),
                tiers: ModelTiers {
                    routine: "claude-3-haiku-20240307".to_string(),
                    interactive: "claude-3-5-sonnet-20241022".to_string(),
                    investigative: "gpt-4".to_string(),
                    critical: "claude-3-opus-20240229".to_string(),
                },
            },
            #[cfg(feature = "discord")]
            discord: DiscordConfig {
                token: String::new(),
                prefix: "!".to_string(),
                allowed_channels: None,
            },
            #[cfg(feature = "mcp")]
            mcp: McpConfig {
                transport: "sse".to_string(),
                port: Some(8080),
            },
        }
    }
}
